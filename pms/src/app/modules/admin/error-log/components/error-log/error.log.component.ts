import { Component, OnDestroy, OnInit } from '@angular/core';
import { Button, ButtonType, Checkbox, DataGrid, DataGridActionButton, DataGridFieldDataType, DataGridFieldType, DataGridFullRowData, DateField, GlobalService } from 'workspace-library';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { Router } from '@angular/router';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { DEFAULT_PAGINATION, GLOBAL_CONSTANTS } from '@constants/constant';
import { BaseResponseModel, BreadcrumbItem, PageAccessPermission } from '@models/common.model';
import { UIService } from '@services/ui.service';
import { PermissionService } from '@services/permission.service';
import { ROUTES } from '@constants/routes';
import { DateFormats, Pages } from '@constants/Enums';
import { Subject, takeUntil } from 'rxjs';
import { ErrorLogService } from '../../services/error.log.service';
import { IErrorLogDelete, IErrorLogList, IErrorLogObject, IErrorLogSearchParams } from '../../models/error.log';

@Component({
  selector: 'app-error-log',
  templateUrl: './error.log.component.html',
  styleUrl: './error.log.component.css'
})
export class ErrorLogComponent implements OnInit, OnDestroy {
  // #region class members
  startDate!: DateField;
  endDate!: DateField;
  selectErrorLog!: Checkbox;
  searchBtnConfig!: Button;
  resetBtnConfig!: Button;
  deleteBtnConfig!: Button;
  errorLogGridConfig!: DataGrid<IErrorLogObject>;
  errorLogList: IErrorLogList | null = {} as IErrorLogList;
  initialSearchParams: IErrorLogSearchParams = {
    ...DEFAULT_PAGINATION,
    startDate: new Date(""),
    endDate: new Date(""),
    sortBy: 'createdOn'
  };
  errorLogSearchParams: IErrorLogSearchParams = { ...this.initialSearchParams };
  filterForm!: FormGroup;
  gridForm!: FormGroup;
  isGridLoading: boolean = true;
  submitted: boolean = false;
  pagePermissions: PageAccessPermission;
  breadcrumbItems: BreadcrumbItem[] = [];
  resetSorting: boolean = false;
  tableColumns: any[] = [
    { field: "createdOn", title: "Date", fieldDataType: DataGridFieldDataType.dateTime, customHeaderClassName: "date"},
    { field: "memberName", title: "Generated By", customHeaderClassName: "user"},
    { field: "ipAddress", title: "Ip Address", customHeaderClassName: "ipAddress" },
    { field: "clientBrowser", title: "Browser", customHeaderClassName: "desc-column" },
    { field: "errorMessage", title: "Message", customHeaderClassName: "desc-column" },
  ];

  private ngUnsubscribe$ = new Subject<void>();
  // #endregion

  // #region constructor
  constructor(
    private service: ErrorLogService,
    private fb: FormBuilder,
    public dialog: MatDialog,
    public globalService: GlobalService,
    public router: Router,
    private uiService: UIService,
    private permissionService: PermissionService
  ) {
    this.errorLogSearchParams = {
      ...this.errorLogSearchParams,
      pageSize: this.uiService.getPageSize() ?? this.errorLogSearchParams.pageSize
    };
    this.pagePermissions = this.permissionService.checkAllPermission(Pages.ErrorLog);
  }

  // #endregion
  ngOnInit(): void {
    this.initializeForm();
    this.setDatePickerConfig();
    this.setCheckBoxConfig();
    this.setButtonConfig();
    this.setTableConfig();
    this.getErrorLogList();
    this.setBreadcrumb();
  }

  ngOnDestroy(): void {
    this.ngUnsubscribe$.next();
    this.ngUnsubscribe$.complete();
    this.ngUnsubscribe$.unsubscribe();
  }

  // #region class methods
  onSingleCheckBoxChange = (
    data: MatCheckboxChange,
    formControlName: string | undefined
  ): void => {
    const gridCheckBoxControl = <FormControl>(
      this.gridForm.get(`selectErrorLog_${formControlName?.split('_')[1]}`)
    );
    if (gridCheckBoxControl) {
      gridCheckBoxControl.patchValue(data.checked);
    }
    this.setAllCheckbox();
    this.deleteButtonDisable();
  };

  deleteErrorLog(): void {
    const ids: number[] = [];
    this.errorLogList?.records?.forEach((record) => {
      const checkBoxControl = <FormControl>(
        this.gridForm.get(`selectErrorLog_${record.id}`)
      );
      if (checkBoxControl.value) {
        ids.push(record.id);
      }
    });
    this.deleteErrorLogConfirmation(ids.join(','));
  }

  getErrorLogList() {
    this.isGridLoading = true;
    const data = {
      ...this.errorLogSearchParams
    };

    this.removeAllControls(["selectErrorLog"]);
    this.gridForm.patchValue({
      selectErrorLog: false
    });
    this.service.getErrorLogs(data)
      .pipe(takeUntil(this.ngUnsubscribe$))
      .subscribe({
        next: (res: BaseResponseModel<IErrorLogList>) => {
          if (res.isSuccess && res.data) {
              this.errorLogList = res.data;
              this.bindControls();
              this.setTableConfig();
          }
          setTimeout(() => {
            this.isGridLoading = false;
          }, 300);
        },
        error: () => {
          this.isGridLoading = false;
        }
      });
  }

  private setBreadcrumb(): void {
    this.breadcrumbItems = [
      { label: 'Admin', link: '' },
      { label: 'Error Log', link: '' }
    ];
  }

  private removeAllControls(controlsToRemove: string[]): void {
    // eslint-disable-next-line no-restricted-syntax
    for (const controlName in this.gridForm.controls) {
      if (this.gridForm.controls[`${controlName}`]) {
        if (!controlsToRemove.includes(controlName)) {
          this.gridForm.removeControl(controlName);
        }
      }
    }
  }

  private setAllCheckbox = (): void => {
    let isChecked = true;
    this.errorLogList?.records?.forEach((record) => {
      const checkBoxControl = <FormControl>(
        this.gridForm.get(`selectErrorLog_${record.id}`)
      );
      if (!checkBoxControl.value) {
        isChecked = false;
      }
    });
    this.gridForm.get(`selectErrorLog`)?.patchValue(isChecked);
  };

  private onSelectAllErrorLog = (
    data: MatCheckboxChange,
  ): void => {
    this.errorLogList?.records?.forEach((record) => {
      const checkBoxControl = <FormControl>(
        this.gridForm.get(`selectErrorLog_${record.id}`)
      );
      if (checkBoxControl) {
        checkBoxControl.patchValue(data.checked);
      }
    });
    this.deleteButtonDisable();
  };

  private deleteButtonDisable(): void {
    const ids: number[] = [];
    this.errorLogList?.records?.forEach((record) => {
      const checkBoxControl = <FormControl>(
        this.gridForm.get(`selectErrorLog_${record.id}`)
      );
      if (checkBoxControl.value) {
        ids.push(record.id);
      }
    });
    this.setDeleteButtonConfig(ids.length <= 0);
  }

  private initializeForm(): void {
    this.filterForm = this.fb?.group({
      startDate: [null],
      endDate: [null],
    });
    this.gridForm = this.fb?.group({
      selectErrorLog: [false]
    });
  }

  private setDatePickerConfig = (): void => {
    this.startDate = {
      label: 'Start Date',
      formControlName: 'startDate',
      needOnKeyDown: false,
      placeholder: "DD-MMM-YYYY",
      max: () => this.filterForm.get('endDate')?.value,
      isYearPicker: false
    };
    this.endDate = {
      label: 'End Date',
      needOnKeyDown: false,
      placeholder: "DD-MMM-YYYY",
      formControlName: 'endDate',
      min: () => this.filterForm.get('startDate')?.value,
      isYearPicker: false
    };
  };

  private setDeleteButtonConfig = (disable: boolean): void => {
    this.deleteBtnConfig = this.uiService.getDeleteButtonConfig(() => { this.deleteErrorLog(); }, disable);
  };

  private setButtonConfig(): void {
    this.searchBtnConfig = this.uiService.getSearchButtonConfig(() => { this.applyFilter(); });
    this.resetBtnConfig = this.uiService.getResetButtonConfig(() => { this.resetFilter(); });
    this.setDeleteButtonConfig(true);
  }

  private setCheckBoxConfig = (): void => {
    this.selectErrorLog = {
      label: '',
      formControlName: 'selectErrorLog',
      customFormFieldClass: 'custom-form-control',
      change: this.onSelectAllErrorLog,
    };
  };

  private resetFilter(): void {
    this.resetSorting = true;
    this.submitted = false;
    this.filterForm.patchValue({
      startDate: '',
      endDate: '',
    });
    this.errorLogSearchParams = {
      ...this.initialSearchParams,
      pageSize: this.uiService.getPageSize() ?? this.initialSearchParams.pageSize,
      sortDirection: GLOBAL_CONSTANTS.ASCENDING
    };
    this.removeAllControls(["selectErrorLog"]);
    this.gridForm.patchValue({
      selectErrorLog: false
    });
    this.getErrorLogList();
    this.setDeleteButtonConfig(true);
  }

  private setTableConfig(): void {
    this.resetSorting = false;
    this.errorLogGridConfig = this.getGridConfig();
  }

  private getGridConfig = (): DataGrid<any> => {
    const config: DataGrid<IErrorLogObject> = {
      actionButtons: this.getActionButtons(),
      columns: this.setTableColumns(),
      formGroup: this.gridForm,
      pageIndex: this.errorLogSearchParams.pageNumber - 1,
      defaultPageSize: this.uiService.getPageSize() ?? this.errorLogSearchParams.pageSize,
      totalDataLength: this.errorLogList?.totalRecords || 0,
      isNoRecordFound: !((this.errorLogList?.totalRecords ?? 0) > 0),
      paginationCallBack: (event) => {
        this.errorLogSearchParams = {
          ...this.errorLogSearchParams,
          pageNumber: (event?.pageIndex ?? 0) + 1,
          pageSize: event?.pageSize
        };
        this.uiService.setPageSize(event?.pageSize);
        this.getErrorLogList();
      },
      gridData: {
        data: this.errorLogList?.records,
        dataSource: undefined
      },
      id: 'ErrorLogGrid',
      idFieldKey: 'id',
      displayIndexNumber: false,
      indexColumnHeaderName: '',
      features: {
        hidePagination: false
      },
      gridFilter: {
        order: { dir: 'desc', sortColumn: 'createdOn' },
        pageNumber: this.errorLogSearchParams.pageNumber,
        pageSize: this.errorLogSearchParams.pageSize
      },
      getSortOrderAndColumn: (event) => {
        if (event && event?.sortColumn && event?.sortDirection) {
          this.errorLogSearchParams = {
            ...this.errorLogSearchParams,
            sortBy: event?.sortColumn,
            pageNumber: 1,
            sortDirection: event?.sortDirection
          };

          this.getErrorLogList();
        }
      }
    };
    return config;
  };

  private setTableColumns() {
    const columnData: any[] = [];
    columnData.push({
      field: "selectErrorLog",
      title: "selectErrorLog",
      fieldDataType: DataGridFieldDataType.boolean,
      fieldType: DataGridFieldType.data,
      isSortable: false,
      customHeaderClassName: "checkbox-column",
      headerEditConfig: {
        controlType: 'checkbox',
        controlConfig: this.selectErrorLog,
      },
      editConfig: {
        isEditable: true,
        idFieldKey: 'id',
        needToShowBasedOn: "FormControl",
        controlType: 'checkbox',
        checkboxChange: this.onSingleCheckBoxChange
      },
    });
    this.tableColumns.forEach((cols) => {
      columnData.push(this.uiService.getColumnConfig(cols));
    });
    return columnData;
  }

  private getActionButtons(): DataGridActionButton<IErrorLogObject>[] {
    const actionsButton = [];
    actionsButton.push(
      {
        btnImageSrc: 'assets/images/view.svg',
        btnDarkImageSrc: 'assets/images/view.svg',
        btnType: ButtonType.img,
        className: 'action-item table-icon-btn',
        tooltip: 'View Details',
        callback: (data: DataGridFullRowData<IErrorLogObject>) => {
          if (data?.rowData?.id) {
            this.router.navigate([ROUTES.ADMIN.ERROR_LOG.ERROR_LOG_DETAILS_ABSOLUTE, data.rowData.id]);
          }
        },
      },
    );
    return actionsButton;
  }

  private bindControls(): void {
    this.gridForm.patchValue({
      selectErrorLog: false
    });
    this.errorLogList?.records.forEach((element) => {
      this.gridForm.addControl(
        "selectErrorLog_".concat(element.id.toString()),
        new FormControl({ value: false, disabled: false })
      );
    });
  }

  private applyFilter(): void {
    this.resetSorting = true;
    this.submitted = true;
    this.errorLogSearchParams = {
      ...this.initialSearchParams,
      pageSize: this.uiService.getPageSize() ?? DEFAULT_PAGINATION.pageSize,
      pageNumber: DEFAULT_PAGINATION.pageNumber,
      startDate: this.filterForm.get('startDate')?.value ? this.uiService.convertDateFormat(this.filterForm.get('startDate')?.value, DateFormats.YYYY_MM_DD) : new Date(""),
      endDate: this.filterForm.get('endDate')?.value ? this.uiService.convertDateFormat(this.filterForm.get('endDate')?.value, DateFormats.YYYY_MM_DD) : new Date(""),
    };
    this.removeAllControls(["selectErrorLog"]);
    this.gridForm.patchValue({
      selectErrorLog: false
    });
    if (this.filterForm.valid) {
      this.getErrorLogList();
    }
    this.setDeleteButtonConfig(true);
  }

  private deleteErrorLogs(ids: string): void {
    const data: IErrorLogDelete = {
      ids
    };
    this.service.deleteErrorLogs(data)
      .pipe(takeUntil(this.ngUnsubscribe$))
      .subscribe({
        next: (response: BaseResponseModel<IErrorLogObject>) => {
          if (response.isSuccess) {
            this.globalService.openSnackBar(response?.message);
            this.getErrorLogList();
            this.setButtonConfig();
          }
        },
      });
  }

  private deleteErrorLogConfirmation(ids: string): void {
    this.uiService.openDeleteModel(() => { this.deleteErrorLogs(ids); });
  }
  // #endregion
}
